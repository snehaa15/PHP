Sessions in PHP allow you to store user data across multiple pages. Unlike cookies, which are stored on the client’s machine, session data is stored on the server. This makes sessions a more secure way to manage user information, especially for sensitive data like login credentials.

### 1. **Starting a Session**

To use sessions in PHP, you need to start a session using the `session_start()` function. This should be called at the beginning of your script, before any output is sent to the browser.

```php
session_start();
```

### 2. **Storing Session Variables**

You can store information in session variables using the `$_SESSION` superglobal array.

```php
session_start(); // Start the session
$_SESSION["username"] = "JohnDoe"; // Store a session variable
$_SESSION["email"] = "john@example.com"; // Store another variable
```

### 3. **Accessing Session Variables**

To access the session variables, you simply reference them using the `$_SESSION` array.

```php
session_start(); // Start the session
if (isset($_SESSION["username"])) {
    echo "Welcome, " . $_SESSION["username"];
} else {
    echo "Welcome, guest!";
}
```

### 4. **Updating Session Variables**

You can update session variables just like regular variables.

```php
$_SESSION["username"] = "JaneDoe"; // Update the session variable
```

### 5. **Deleting Session Variables**

To delete a specific session variable, use the `unset()` function.

```php
unset($_SESSION["username"]); // Remove the username variable
```

### 6. **Destroying a Session**

To completely end a session and delete all session variables, use `session_destroy()`. This should be done after calling `session_start()`.

```php
session_start(); // Start the session
session_unset(); // Clear all session variables
session_destroy(); // Destroy the session
```

### 7. **Example: Using Sessions**

Here’s a simple example demonstrating how to use sessions in PHP:

**login.php** (Start a session and store user data)

```php
session_start(); // Start the session

// Simulate user login
$_SESSION["username"] = "JohnDoe"; // Store username
$_SESSION["email"] = "john@example.com"; // Store email

echo "User logged in. Welcome, " . $_SESSION["username"];
```

**welcome.php** (Access session data)

```php
session_start(); // Start the session

if (isset($_SESSION["username"])) {
    echo "Welcome back, " . $_SESSION["username"] . "!";
} else {
    echo "Please log in.";
}
```

**logout.php** (Destroy the session)

```php
session_start(); // Start the session
session_unset(); // Clear session variables
session_destroy(); // Destroy the session

echo "You have been logged out.";
```

### 8. **Session Configuration Options**

You can configure various session settings in the `php.ini` file, such as:

- **session.save_path**: Directory where session files are stored.
- **session.gc_maxlifetime**: Duration (in seconds) after which session data is considered garbage and is cleaned up.

### Summary

Sessions are an effective way to manage user data across multiple pages in PHP applications. They provide a secure and flexible way to handle user authentication and other user-specific information. By using sessions, you can create a seamless user experience across your web application.